x<-scale(treesdata$Girth)[,1]
y<-scale(treesdata$Height)[,1]
x_g <- pretty(x, n = 100)
regression<-regression_fit(x_g,x,y,4)
pdf(file = 'regression.pdf')
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
dev.off()
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
regression_fit<-function(x_g,x,y,p=1,method='BFGS'){
X<-cbind(x)
X_g<-cbind(x_g)
if(p>1){
for(i in 2:p){
X <- cbind(X, x^i)
X_g <- cbind(X_g, x_g^i)
}
}
mod1 <- lsfit(X, y, intercept = FALSE)
predPoly<-X%*%mod1$coefficients
#Gaussian Process version
answer_BFGS <- optim(c(0,0,0),x=x,y=y, fn=gp_criterion, method=method)
# Let's compare fit!
sig_sq <- exp(answer_BFGS$par[1])
rho_sq <- exp(answer_BFGS$par[2])
tau_sq <- exp(answer_BFGS$par[3])
# Create covariance matrices
C <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 )
Sigma <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Now create predictions
predGaussian <- C %*% solve(Sigma, y)
return(list(predpoly=predPoly,predGaussian=predGaussian))
}
regression<-regression_fit(x_g,x,y,4)
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
regression<-regression_fit(x_g,x,y,4)
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
regression_fit<-function(x_g,x,y,p=1,method='BFGS'){
X<-cbind(x)
X_g<-cbind(x_g)
if(p>1){
for(i in 2:p){
X <- cbind(X, x^i)
X_g <- cbind(X_g, x_g^i)
}
}
mod1 <- lsfit(X, y, intercept = FALSE)
predPoly<-X%*%mod1$coefficients
#Gaussian Process version
answer_BFGS <- optim(c(0,0,0),x=x,y=y, fn=gp_criterion, method=method)
# Let's compare fit!
sig_sq <- exp(answer_BFGS$par[1])
rho_sq <- exp(answer_BFGS$par[2])
tau_sq <- exp(answer_BFGS$par[3])
# Create covariance matrices
C <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 )
Sigma <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Now create predictions
predGaussian <- C %*% solve(Sigma, y)
return(list(predpoly=predPoly,predGaussian=predGaussian))
}
x<-scale(treesdata$Girth)[,1]
y<-scale(treesdata$Height)[,1]
x_g <- pretty(x, n = 100)
regression<-regression_fit(x_g,x,y,4)
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
dev.off()
regression_fit<-function(x_g,x,y,p=1,method='BFGS'){
X<-cbind(x)
X_g<-cbind(x_g)
if(p>1){
for(i in 2:p){
X <- cbind(X, x^i)
X_g <- cbind(X_g, x_g^i)
}
}
mod1 <- lsfit(X, y, intercept = FALSE)
predPoly<-X_g%*%mod1$coefficients
#Gaussian Process version
answer_BFGS <- optim(c(0,0,0),x=x,y=y, fn=gp_criterion, method=method)
# Let's compare fit!
sig_sq <- exp(answer_BFGS$par[1])
rho_sq <- exp(answer_BFGS$par[2])
tau_sq <- exp(answer_BFGS$par[3])
# Create covariance matrices
C <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 )
Sigma <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Now create predictions
predGaussian <- C %*% solve(Sigma, y)
return(list(predpoly=predPoly,predGaussian=predGaussian))
}
regression<-regression_fit(x_g,x,y,4)
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
plot_4
dev.new()
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
regression_fit<-function(x_g,x,y,p=1,method='BFGS'){
X<-cbind(x)
X_g<-cbind(x_g)
if(p>1){
for(i in 2:p){
X <- cbind(X, x^i)
X_g <- cbind(X_g, x_g^i)
}
}
mod1 <- lsfit(X, y, intercept = FALSE)
predPoly<-X_g%*%mod1$coefficients
#Gaussian Process version
answer_BFGS <- optim(c(0,0,0),x=x,y=y, fn=gp_criterion, method=method)
# Let's compare fit!
sig_sq <- exp(answer_BFGS$par[1])
rho_sq <- exp(answer_BFGS$par[2])
tau_sq <- exp(answer_BFGS$par[3])
# Create covariance matrices
C <- sig_sq * exp( - rho_sq * outer(x_g, x, '-')^2 )
Sigma <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Now create predictions
predGaussian <- C %*% solve(Sigma, y)
return(list(predpoly=predPoly,predGaussian=predGaussian))
}
x<-scale(treesdata$Girth)[,1]
y<-scale(treesdata$Height)[,1]
x_g <- pretty(x, n = 100)
regression<-regression_fit(x_g,x,y,4)
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=4)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=4)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
plot_2<-ggplot(flights_2, aes(x=air_time, color=carrier))+
geom_density()+
xlab('Air time of Carriers') +
ylab('Density') +
ggtitle('Flights from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))+
scale_colour_discrete(name = "Carriers")+
geom_vline(data=avg_air_time, aes(xintercept=air_time, color=carrier),
linetype="dashed")
plot_2
plot_2<-ggplot(flights_2, aes(x=air_time, color=carrier))+
geom_density()+
xlab('Air time of Carriers') +
ylab('Density') +
ggtitle('Flights from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))+
scale_colour_discrete(name = "Carriers")+
geom_vline(data=avg_air_time, aes(xintercept=air_time, color=carrier))
plot_2
rm(list=ls())
# Make results reproducible
set.seed(12345)
# For this question, load in the trees data set from the datasets package.
library(datasets)
library(mvtnorm)
# Define criterion to be minimised in Gaussian process regression
gp_criterion = function(p,x,y) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = exp(p[3])
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
regression_fit<-function(x_g,x,y,p=1,method='BFGS'){
X<-cbind(x)
X_g<-cbind(x_g)
if(p>1){
for(i in 2:p){
X <- cbind(X, x^i)
X_g <- cbind(X_g, x_g^i)
}
}
mod1 <- lsfit(X, y, intercept = FALSE)
predPoly<-X_g%*%mod1$coefficients
#Gaussian Process version
answer_BFGS <- optim(c(0,0,0),x=x,y=y, fn=gp_criterion, method=method)
# Let's compare fit!
sig_sq <- exp(answer_BFGS$par[1])
rho_sq <- exp(answer_BFGS$par[2])
tau_sq <- exp(answer_BFGS$par[3])
# Create covariance matrices
C <- sig_sq * exp( - rho_sq * outer(x_g, x, '-')^2 )
Sigma <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Now create predictions
predGaussian <- C %*% solve(Sigma, y)
return(list(predpoly=predPoly,predGaussian=predGaussian))
}
treesdata<-data.frame(trees)
x<-scale(treesdata$Girth)[,1]
y<-scale(treesdata$Height)[,1]
x_g <- pretty(x, n = 100)
regression<-regression_fit(x_g,x,y,4)
pdf(file = 'regression.pdf')
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
dev.off()
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
dev.cur()
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
dev.new()
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="blue")
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="lightblue")
pdf(file = 'regression.pdf')
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="lightblue")
dev.off()
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="lightblue")
# We will be using data from the nycflights13 package.
library(nycflights13)
library(magrittr)
library(ggplot2)
flights_2<-flights%>%
subset(origin=="EWR" & dest =="LAX")%>%
transform(., carrier = factor(carrier,levels=c("UA","VX","AA") ))
plot_1<-ggplot(flights_2, aes(x = carrier))+
geom_bar()+
geom_text(stat='count',aes(label=stat(count)),vjust=-1)+
xlab('Carriers') +
ylab('Flights Count') +
ggtitle('Number of flights from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))
plot_1
ggsave(plot_1, file = 'plot_1.pdf', width = 12, height = 8)
avg_air_time<-flights_2%>%
aggregate(air_time~carrier, data=.,FUN =  'mean' )
plot_2<-ggplot(flights_2, aes(x=air_time, color=carrier))+
geom_density()+
xlab('Air time of Carriers') +
ylab('Density') +
ggtitle('Flights from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))+
scale_colour_discrete(name = "Carriers")
plot_2
ggsave(plot_2, file = 'plot_2.pdf', width = 12, height = 8)
speed<- function(dataset){
dataset%>%
within(.,speed<-distance%>%divide_by(air_time%>%divide_by(60)))
}
flights_2<- flights_2%>%speed
plot_3<-ggplot(flights_2,aes(as.factor(month),speed))+
geom_boxplot()+
xlab('Month') +
ylab('Speed') +
ggtitle('Speed per Month')+
theme(plot.title = element_text(hjust = 0.5))
plot_3
ggsave(plot_3, file = 'plot_2.pdf', width = 12, height = 8)
plot_4<-ggplot(flights_2, aes(x = dep_delay, y = arr_delay, colour = carrier)) +
geom_point(na.rm = TRUE)+
scale_color_discrete("Carriers")+
facet_wrap(~carrier,scales = 'free_x')+
xlab('Departure Delay') +
ylab('Arrival Delay') +
ggtitle('Affect of Departure Delay on Arrival Delay by carriers from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))
plot_4
ggsave(plot_4, file = 'plot_4.pdf', width = 12, height = 8)
ggsave(plot_3, file = 'plot_2.pdf', width = 12, height = 8)
plot_3<-ggplot(flights_2,aes(as.factor(month),speed))+
geom_boxplot(na.rm = TRUE)+
xlab('Month') +
ylab('Speed') +
ggtitle('Speed per Month')+
theme(plot.title = element_text(hjust = 0.5))
plot_3
ggsave(plot_3, file = 'plot_2.pdf', width = 12, height = 8)
plot_3<-ggplot(flights_2,aes(as.factor(month),speed))+
geom_boxplot(na.rm = TRUE)+
xlab('Month') +
ylab('Speed') +
ggtitle('Speed per Month')+
theme(plot.title = element_text(hjust = 0.5))
plot_3
ggsave(plot_3, file = 'plot_3.pdf', width = 12, height = 8)
plot_2<-ggplot(flights_2, aes(x=air_time, color=carrier))+
geom_density()+
xlab('Air time of Carriers') +
ylab('Density') +
ggtitle('Flights from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))+
scale_colour_discrete(name = "Carriers")
plot_2
ggsave(plot_2, file = 'plot_2.pdf', width = 12, height = 8)
rm(list=ls())
# Make results reproducible
set.seed(12345)
# Define criterion to be minimised in Gaussian process regression
gp_criterion = function(p,x,y) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = exp(p[3])
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
regression_fit<-function(x_g,x,y,p=1,method='BFGS'){
X<-cbind(x)
X_g<-cbind(x_g)
if(p>1){
for(i in 2:p){
X <- cbind(X, x^i)
X_g <- cbind(X_g, x_g^i)
}
}
mod1 <- lsfit(X, y, intercept = FALSE)
predPoly<-X_g%*%mod1$coefficients
#Gaussian Process version
answer_BFGS <- optim(c(0,0,0),x=x,y=y, fn=gp_criterion, method=method)
# Let's compare fit!
sig_sq <- exp(answer_BFGS$par[1])
rho_sq <- exp(answer_BFGS$par[2])
tau_sq <- exp(answer_BFGS$par[3])
# Create covariance matrices
C <- sig_sq * exp( - rho_sq * outer(x_g, x, '-')^2 )
Sigma <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Now create predictions
predGaussian <- C %*% solve(Sigma, y)
return(list(predpoly=predPoly,predGaussian=predGaussian))
}
treesdata<-data.frame(trees)
x<-scale(treesdata$Girth)[,1]
y<-scale(treesdata$Height)[,1]
x_g <- pretty(x, n = 100)
regression<-regression_fit(x_g,x,y,4)
pdf(file = 'regression.pdf')
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="lightblue")
dev.off()
flights_2<-flights%>%
subset(origin=="EWR" & dest =="LAX")%>%
transform(., carrier = factor(carrier,levels=c("UA","VX","AA") ))
plot_1<-ggplot(flights_2, aes(x = carrier))+
geom_bar()+
geom_text(stat='count',aes(label=stat(count)),vjust=-1)+
xlab('Carriers') +
ylab('Flights Count') +
ggtitle('Number of flights from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))
plot_1
ggsave(plot_1, file = 'plot_1.pdf', width = 12, height = 8)
plot_2<-ggplot(flights_2, aes(x=air_time, color=carrier))+
geom_density()+
xlab('Air time of Carriers') +
ylab('Density') +
ggtitle('Flights from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))+
scale_colour_discrete(name = "Carriers")
plot_2
ggsave(plot_2, file = 'plot_2.pdf', width = 12, height = 8)
speed<- function(dataset){
dataset%>%
within(.,speed<-distance%>%divide_by(air_time%>%divide_by(60)))
}
flights_2<- flights_2%>%speed
plot_3<-ggplot(flights_2,aes(as.factor(month),speed))+
geom_boxplot(na.rm = TRUE)+
xlab('Month') +
ylab('Speed') +
ggtitle('Speed per Month')+
theme(plot.title = element_text(hjust = 0.5))
plot_3
ggsave(plot_3, file = 'plot_3.pdf', width = 12, height = 8)
plot_4<-ggplot(flights_2, aes(x = dep_delay, y = arr_delay, colour = carrier)) +
geom_point(na.rm = TRUE)+
scale_color_discrete("Carriers")+
facet_wrap(~carrier,scales = 'free_x')+
xlab('Departure Delay') +
ylab('Arrival Delay') +
ggtitle('Affect of Departure Delay on Arrival Delay by carriers from EWR to LAX')+
theme(plot.title = element_text(hjust = 0.5))
plot_4
ggsave(plot_4, file = 'plot_4.pdf', width = 12, height = 8)
# Define criterion to be minimised in Gaussian process regression
gp_criterion = function(p,x,y) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = exp(p[3])
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
regression_fit<-function(x_g,x,y,p=1,method='BFGS'){
X<-cbind(x)
X_g<-cbind(x_g)
if(p>1){
for(i in 2:p){
X <- cbind(X, x^i)
X_g <- cbind(X_g, x_g^i)
}
}
#fitting the model
mod1 <- lsfit(X, y, intercept = FALSE)
predPoly<-X_g%*%mod1$coefficients
#Gaussian Process version
answer_BFGS <- optim(c(0,0,0),x=x,y=y, fn=gp_criterion, method=method)
# Let's compare fit!
sig_sq <- exp(answer_BFGS$par[1])
rho_sq <- exp(answer_BFGS$par[2])
tau_sq <- exp(answer_BFGS$par[3])
# Create covariance matrices
C <- sig_sq * exp( - rho_sq * outer(x_g, x, '-')^2 )
Sigma <- sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Now create predictions
predGaussian <- C %*% solve(Sigma, y)
return(list(predpoly=predPoly,predGaussian=predGaussian))
}
treesdata<-data.frame(trees)
x<-scale(treesdata$Girth)[,1]
y<-scale(treesdata$Height)[,1]
x_g <- pretty(x, n = 100)
#calling the function
regression<-regression_fit(x_g,x,y,4)
plot(x,y,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(x_g, regression$predpoly, col = 'darkorange2', lty = 'dotted', lwd=2)
lines(x_g, regression$predGaussian, col = 'deepskyblue3', lty = 'dotted', lwd=2)
legend("bottomright", legend=c("Polynomial Regression", "Gaussian Process Regression"),
cex=0.8,fill=c("darkorange2","deepskyblue3"),
box.lty=2, box.lwd=2, box.col="lightblue")

# Calling the regression function with required values.
data2<-obj
#methodtype<-'BFGS'
#methodtype<-type
x<-scale(data2$clim_year$year)[,1]
y<-scale(data2$clim_year$temp)[,1]
x_g <- pretty(x, n = 100)
#calling the function
regression<-regression_fit(x_g,x,y,4,type)
print(regression)
return(regression)
# Define criterion to be minimised in Gaussian process regression
gp_criterion = function(p,x,y) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = exp(p[3])
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
regression_fit = function(x_g, x, y, p = 1, method = 'BFGS')
{
# Create design matrices
x_rep = matrix(rep(x, p+1), ncol = (p+1), nrow = length(x))
X = sweep(x_rep, 2, 0:p, '^')
X_g_rep = matrix(rep(x_g, p+1), ncol = (p+1), nrow = length(x_g))
X_g = sweep(X_g_rep, 2, 0:p, '^')
# Find best hyperparameters
optim_res = optim(rep(0, 3), gp_criterion, x = x, y = y, method = method)
return(optim_res)
}
}
abc1(data1,'BFGS')
View(data1)
####################
abc1 <- function(obj,type = c('Nelder-Mead', 'BFGS', 'SANN','Brent')){
# Calling the regression function with required values.
data2<-obj
#methodtype<-'BFGS'
#methodtype<-type
x<-scale(data2$clim_year$year)[,1]
y<-scale(data2$clim_year$temp)[,1]
x_g <- pretty(x, n = 100)
#calling the function
regression<-regression_fit(x_g,x,y,4,type)
print(regression)
return(regression)
}
# Define criterion to be minimised in Gaussian process regression
gp_criterion = function(p,x,y) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = exp(p[3])
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
regression_fit = function(x_g, x, y, p = 1, method = 'BFGS')
{
# Create design matrices
x_rep = matrix(rep(x, p+1), ncol = (p+1), nrow = length(x))
X = sweep(x_rep, 2, 0:p, '^')
X_g_rep = matrix(rep(x_g, p+1), ncol = (p+1), nrow = length(x_g))
X_g = sweep(X_g_rep, 2, 0:p, '^')
# Find best hyperparameters
optim_res = optim(rep(0, 3), gp_criterion, x = x, y = y, method = method)
return(optim_res)
}
View(regression_fit)
View(regression_fit)
temp2<-abc1(data1,'BFGS')
# Extract the results
sig_sq = exp(temp2$par[1])
rho_sq = exp(temp2$par[2])
tau_sq = exp(temp2$par[3])
time_grid = pretty(data1$clim_year, n = 100)
time_grid = pretty(data1$clim_year$year, n = 100)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, data1$clim_year$year, '-')^2 )
Sigma = sig_sq * exp( - rho_sq * outer(data1$clim_year$year, data1$clim_year$year, '-')^2 ) + tau_sq * diag(length(data1$clim_year$year))
# Create predictions
pred_gp = C %*% solve(Sigma, data1$clim_year$temp)
fits <- tibble(time_grid, pred = pred_gp %>%
fits <- tibble(time_grid, pred = pred_gp %>%
na.omit()
fits <- tibble(time_grid, pred = pred_gp %>%
na.omit())
fits <- tibble(time_grid, pred = pred_gp)
fits
ggplot(data1, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly')
ggplot(data1$clim_year, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly')
geom_line(data = fits, aes(x = time_grid, y = pred, colour = pred))
ggplot(data1$clim_year, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid, y = pred, colour = pred)) +
theme(legend.position = 'None') +
scale_color_viridis()
ggplot(data1$clim_year, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid, y = pred, colour = pred))
fits
plot(data1$clim_year$year,data1$clim_year$temp,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
plot(data1$clim_year$year,data1$clim_year$temp,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(data1$clim_year$year,pred_gp,col = 'darkorange2', lty = 'dotted', lwd=2)
regression_fit = function(x_g, x, y, p = 1, method = 'BFGS')
{
# Create design matrices
x_rep = matrix(rep(x, p+1), ncol = (p+1), nrow = length(x))
X = sweep(x_rep, 2, 0:p, '^')
X_g_rep = matrix(rep(x_g, p+1), ncol = (p+1), nrow = length(x_g))
X_g = sweep(X_g_rep, 2, 0:p, '^')
# Find best hyperparameters
optim_res = optim(rep(0, 3), gp_criterion, x = x, y = y, method = method)
return(optim_res)
}
type<-'BFGS'
data2<-data1$clim_year
x<-scale(data2$clim_year$year)[,1]
data2<-data1
type<-'BFGS'
x<-scale(data2$clim_year$year)[,1]
y<-scale(data2$clim_year$temp)[,1]
x_g <- pretty(x, n = 100)
#calling the function
regression<-regression_fit(x_g,x,y,4,type)
# Extract the results
sig_sq = exp(regression$par[1])
rho_sq = exp(regression$par[2])
tau_sq = exp(regression$par[3])
time_grid = pretty(x, n = 100)
time_grid = pretty(data2$clim_year$year, n = 100)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Create predictions
pred_gp = C %*% solve(Sigma, data1$clim_year$temp)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
time_grid = pretty(data2$clim_year$year, n = 100)
time_grid = pretty(x, n = 100)
time_grid
time_grid = pretty(data2$clim_year$year, n = 100)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
time_grid = pretty(x, n = 100)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Create predictions
pred_gp = C %*% solve(Sigma, pretty(data1$clim_year$temp,n=100))
solve(Sigma, pretty(data1$clim_year$temp,n=100)
solve(Sigma, pretty(data1$clim_year$temp,n=100))
# Create predictions
pred_gp = C %*% solve(Sigma, data1$clim_year$temp)
plot(time_grid,pred_gp)
length(time_grid)
time_grid = pretty(data2$clim_year$year, n = 100)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Create predictions
pred_gp = C %*% solve(Sigma, data1$clim_year$temp)
plot(time_grid,pred_gp)
time_grid = pretty(x, n = 100)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
time_grid = pretty(x, n = 100)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Create predictions
pred_gp = C %*% solve(Sigma, data1$clim_year$temp)
plot(time_grid,pred_gp)
time_grid
data2<-data1
type<-'BFGS'
x<-scale(data2$clim_year$year)[,1]
y<-scale(data2$clim_year$temp)[,1]
#calling the function
regression<-regression_fit(x_g,x,y,4,type)
# Extract the results
sig_sq = exp(regression$par[1])
rho_sq = exp(regression$par[2])
tau_sq = exp(regression$par[3])
time_grid = pretty(x, n = 100)
# Create covariance matrices
C = sig_sq * exp( - rho_sq * outer(time_grid, x, '-')^2 )
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
# Create predictions
pred_gp = C %*% solve(Sigma, y)
plot(time_grid,pred_gp)
# get center and scaling values
m1 <- mean(data1$clim_year$year)
s1 <- sd(data1$clim_year$year)
time_grid1<-(time_grid1*s1)+m1
time_grid1<-(time_grid*s1)+m1
pred_gp1<-(pred_gp*s1)+m1
plot(time_grid1,pred_gp1)
# get center and scaling values
m2 <- mean(data1$clim_year$temp)
s2 <- sd(data1$clim_year$temp)
pred_gp1<-(pred_gp*s2)+m2
plot(time_grid1,pred_gp1)
plot(data2$clim_year$year,data2$clim_year$temp,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(time_grid1,pred_gp1,col = 'darkorange2', lty = 'dotted', lwd=2)
pred_gp
document()
document()
library(climr)
document()
library(climr)
document()
document()
library(climr)
document()
document()
library(climr)
setwd("~/UCD/R/Assignment2")
library(climr)
library(devtools)
document
document()
documents()
library(devtools)
document()
documents()
documents()
library(devtools)
?document
document()
setwd("~/UCD/R/Assignment2")
document()
setwd("~/UCD/R/Assignment2/climr")
document()
document()
document()
document()
library(climr)
document()
document()
library(climr)
rm(gp_fit())
document()
rm(list = c("gp_criterion", "gp_fit"))
clear
document()
document()
rm(list = c("regression_fit"))
document()
library(climr)
document()
library(climr)
?gp_fit
document()
library(climr)
testing1<-gp_fit(data1,'BFGS')
library(climr)
testing1<-gp_fit(data1,'BFGS')
library(climr)
testing1<-gp_fit(data1,'BFGS')
testing1$model
pred_gp
pred_gp[70,]==testing1$model[70,]
document()
library(climr)
rm(list = c("abc1","gp_fit1"))
?outer
document()
testing1$model
testing1$time_grid
#mean and sd of x axis
# get center and scaling values
m1 <- mean(data1$clim_year$year)
s1 <- sd(data1$clim_year$year)
# get center and scaling values
m2 <- mean(data1$clim_year$temp)
s2 <- sd(data1$clim_year$temp)
pred_gp1<-(testing1$model*s2)+m2
plot(data1$clim_year$year,data1$clim_year$temp,xlab = "Girth",ylab = "Height",main = "Height vs Girth")
lines(time_grid1,pred_gp1,col = 'darkorange2', lty = 'dotted', lwd=2)
fits<-tibble(time_grid1,pred_gp1)
# Finally create the plot
ggplot(data1$clim_year, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid1, y = pred1, colour = pred1)) +
theme(legend.position = 'None') +
scale_color_viridis()
# Finally create the plot
ggplot(data1$clim_year, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid1, y = pred_gp1, colour = pred_gp1)) +
theme(legend.position = 'None') +
scale_color_viridis()
document()
library(climr)
data1$clim_year
tail(data1$clim_year)
fits
testing1$model
library(climr)
time_grid1
testing2<-gp_fit(data1,'BFGS')
testing1$time_grid
testing1$model
pred_gp1
testing2$x
library(climr)
testing2<-gp_fit(data1,'BFGS')
testing2$x
testing2$x$year
testing2$regression$time_grid
#mean and sd of x axis
# get center and scaling values
m1 <- mean(testing2$x$year)
s1 <- sd(testing2$x$year)
# get center and scaling values
m2 <- mean(testing2$x$temp)
s2 <- sd(testing2$x$temp)
time_grid1<-(testing2$regression$time_grid*s1)+m1
pred_gp1<-(testing2$regression$$model*s2)+m2
fits<-tibble(time_grid1,pred_gp1)
# Finally create the plot
ggplot(testing2$clim_year, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid1, y = pred_gp1, colour = pred_gp1)) +
theme(legend.position = 'None') +
scale_color_viridis()
ggplot(testing2$clim_year, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid1, y = pred_gp1, colour = pred_gp1)) +
theme(legend.position = 'None')
ggplot(testing2$x, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid1, y = pred_gp1, colour = pred_gp1))
# Finally create the plot
ggplot(testing2$x, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid1, y = pred_gp1, colour = pred_gp1)) +
theme(legend.position = 'None') +
scale_color_viridis()
library(ggplot2)
?scale_color_viridis
# Finally create the plot
ggplot(testing2$x, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid1, y = pred_gp1, colour = pred_gp1)) +
theme(legend.position = 'None') +
scale_color_viridis()
library(viridis)
# Finally create the plot
ggplot(testing2$x, aes(year, temp)) +
geom_point(aes(colour = temp)) +
theme_bw() +
xlab('Year') +
ylab('Temperature anomaly') +
geom_line(data = fits, aes(x = time_grid1, y = pred_gp1, colour = pred_gp1)) +
theme(legend.position = 'None') +
scale_color_viridis()
library(climr)
document()
plot.climr_gp_fit(testing2)
plot(testing2)
library(climr)
d1<-load_clim("NH")
d1
d2<-gp_fit
d2<-gp_fit(d1,"BFGS")
d2
plot(d2)
plot(d2)
document()
library(climr)
library(climr)
dd1<-load_clim("NH")
dd2<-gp_fit(dd1,"BFGS")
plot(dd2)
document()
?sd
library(climr)
data1<-load_clim("NH")
data2<-gp_fit(data1,"BFGS")
plot(data2)
document()
document()
library(climr)
document()
library(climr)
document()
document()
document()
library(climr)
document()
data2 = fit(data1, fit_type = 'BFGS')
data2 = fit(data1, 'BFGS')
data2<-gp_fit(data1,fit_type="BFGS")
data2<-gp_fit(data1,type="BFGS")
library(climr)
document()
?plot
?plot.climr
library(climr)
document()
library(climr)
library(climr)
library(climr)
document()
build()
library(climr)
document()
?plot.climr_gp_fit()
library(climr)
?load_clim
library(climr)
document()
?plot.climr_gp_fit()
library(climr)
document()
?plot.climr_gp_fit()
plot(data2)
library(climr)
document()
?plot.climr_gp_fit()
?gp_clim
library(climr)
?gp_clim
?gp_fit
?fitt
?fit
?plot.climr_fit()
?fit
?gp_fit
library(climr)
document()
?gp_fit
library(climr)
document()
?gp_fit
library(climr)
document()
data1<-load_clim('NH')
data2<-gp_fit(data1,'BFGS')
plot.climr_gp_fit(data2)
?gp_fit
library(climr)
document()
data1<-load_clim('NH')
data2<-gp_fit(data1,'BFGS')
plot.climr_gp_fit(data2)
?load_climr
library(climr)
?load_climr
?load_clim
?climr
?ggplot
library(climr)
document()
library(climr)
build()
library(devtools)
build()
data1<-load_clim('GLB')
data2<-gp_fit(data1,'SANN')
plot(data2)
data2<-gp_fit(data1,'Brent')
data2<-gp_fit(data1,'Nelder-Mead')
plot(data2)
?plot.climr_gp_fit
?plot.climr_fit
?plot.climr_gp_fit
library(climr)
?gp_fit

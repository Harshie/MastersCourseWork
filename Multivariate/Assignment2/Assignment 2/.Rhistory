sammonstress<-c()
#Kruskal stress variable
kruskalstress<-c()
for(i in 2:8){
sammonstress<-c(sammonstress,sammon(D,k=i)$stress)
kruskalstress<-c(kruskalstress,isoMDS(D,k=i)$stress)
}
#Plotting the stress of Sammon metric least squares scaling
plot(x=c(1:k),y=sammonstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
k<-8
#Sammon stress variable
sammonstress<-c()
#Kruskal stress variable
kruskalstress<-c()
k<-8
for(i in 2:k){
sammonstress<-c(sammonstress,sammon(D,k=i)$stress)
kruskalstress<-c(kruskalstress,isoMDS(D,k=i)$stress)
}
#Plotting the stress of Sammon metric least squares scaling
plot(x=c(2:k),y=sammonstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
#Plotting the stress of Kruskal's non-metric scaling
plot(x=c(2:k),y=kruskalstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
#Sammon stress variable
sammonstress<-c()
#Kruskal stress variable
kruskalstress<-c()
k<-8
for(i in 2:k){
sammonstress<-c(sammonstress,sammon(D,k=i)$stress)
kruskalstress<-c(kruskalstress,isoMDS(D,k=i)$stress)
}
#Plotting the stress of Sammon metric least squares scaling
plot(x=c(2:k),y=sammonstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
#Plotting the stress of Kruskal's non-metric scaling
plot(x=c(1:k),y=kruskalstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
#Sammon stress variable
sammonstress<-c()
#Kruskal stress variable
kruskalstress<-c()
k<-8
for(i in 2:k){
sammonstress<-c(sammonstress,sammon(D,k=i)$stress)
kruskalstress<-c(kruskalstress,isoMDS(D,k=i)$stress)
}
#Plotting the stress of Sammon metric least squares scaling
plot(x=c(2:k),y=sammonstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
#Plotting the stress of Kruskal's non-metric scaling
plot(x=c(2:k),y=kruskalstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
#Sammon stress variable
sammonstress<-c()
#Kruskal stress variable
kruskalstress<-c()
k<-8
for(i in 1:k){
sammonstress<-c(sammonstress,sammon(D,k=i)$stress)
kruskalstress<-c(kruskalstress,isoMDS(D,k=i)$stress)
}
#Plotting the stress of Sammon metric least squares scaling
plot(x=c(1:k),y=sammonstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
#Plotting the stress of Kruskal's non-metric scaling
plot(x=c(1:k),y=kruskalstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions")
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
#Sammon stress variable
sammonstress<-c()
#Kruskal stress variable
kruskalstress<-c()
k<-8
for(i in 1:k){
sammonstress<-c(sammonstress,sammon(D,k=i)$stress)
kruskalstress<-c(kruskalstress,isoMDS(D,k=i)$stress)
}
#Plotting the stress of Sammon metric least squares scaling
plot(x=c(1:k),y=sammonstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions",main = "Sammon Stress for 8 dimensions")
#Plotting the stress of Kruskal's non-metric scaling
plot(x=c(1:k),y=kruskalstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions",main = "Kruskal Stress for 8 dimensions")
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
#Sammon stress variable
sammonstress<-c()
#Kruskal stress variable
kruskalstress<-c()
k<-8
for(i in 1:k){
sammonstress<-c(sammonstress,sammon(D,k=i)$stress)
kruskalstress<-c(kruskalstress,isoMDS(D,k=i)$stress)
}
#Plotting the stress of Sammon metric least squares scaling
plot(x=c(1:k),y=sammonstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions",main = "Sammon Stress for 8 Dimensions")
#Plotting the stress of Kruskal's non-metric scaling
plot(x=c(1:k),y=kruskalstress,type = "b", xaxp=c(1,k, k-1), ylab="Stress", xlab="Number of dimensions",main = "Kruskal Stress for 8 Dimensions")
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "Point 1",ylab = "Point 2",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
legend("topright", legend=unique(hyptisdata[,8]),
col=c("green","black","blue","red"), pch=19, cex=0.8)
Sammon2$points
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),pch=20)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],pch=20)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
legend("topright", legend=unique(hyptisdata[,8]),
col=c("green","black","blue","red"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],pch="n")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
legend("topright", legend=unique(hyptisdata[,8]),
col=c("green","black","blue","red"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
legend("topright", legend=unique(hyptisdata[,8]),
col=c("green","black","blue","red"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n")
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=unique(hyptisdata[,8]),
col=c("green","black","blue","red"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE)
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n")
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=unique(hyptisdata[,8]),
col=c("green","black","blue","red"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE)
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n")
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(unique(hyptisdata[,8],"Sammon","Kruskal")),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE)
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n")
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(unique(hyptisdata[,8]),"Sammon","Kruskal"),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE)
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "")
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(unique(hyptisdata[,8]),"Sammon","Kruskal"),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
legend1<-unique(hyptisdata[,8])
legend1
legend1<-c(legend1,"Sammon","Kruskal")
legend1
legend1<-unique(hyptisdata[,8])
legend1
legend1<-as.character(unique(hyptisdata[,8]))
legend1
legend1<-c(legend1,"Sammon","Kruskal")
legend1
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
legend1<-as.character(unique(hyptisdata[,8]))
legend1<-c(legend1,"Sammon","Kruskal")
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE)
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "")
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE)
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE)
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "")
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "")
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "")
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,40),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("green","black","blue","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","blue","red","green")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue2","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue2","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="yellow")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue2","red","pink","yellow"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue2","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold1")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue2","red","pink","gold1"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue2","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="pink")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold3")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue2","red","pink","gold3"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue2","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="orange")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold1")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue2","red","orange","gold1"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue2","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="tomato")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold1")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue2","red","tomato","gold1"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue2","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="royalblue1")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold1")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue2","red","royalblue1","gold1"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue3","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="royalblue1")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold1")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue3","red","royalblue1","gold1"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,50),ylim = c(-30,40), xlab = "",ylab = "",main="Classical metric")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue3","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="royalblue1")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold1")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue3","red","royalblue1","gold1"), pch=19, cex=0.8)
#Matching the configurations of Classical,Sammon and Kruskal scaling method.
proc12<-procrustes(mds2$points,sammon2$points)
library(vegan)
#Matching the configurations of Classical,Sammon and Kruskal scaling method.
proc12<-procrustes(mds2$points,sammon2$points)
#Matching the configurations of Classical,Sammon and Kruskal scaling method.
proc12<-procrustes(mds2$points,Sammon2$points)
proc23<-procrustes(Sammon2$points,Kruskal2$points)
proc31<-procrustes(Kruskal2$points,mds2$points)
#Plotting each match with procrustes error between the two configuration
plot(proc12,xlab = "Dimension 1",ylab = "Dimension 2", main = "Procrustes Errors for Classical MDS vs Sammon MDS on Hyptis data")
plot(proc23,xlab = "Dimension 1",ylab = "Dimension 2", main = "Procrustes Errors for Classical MDS vs Sammon MDS on Hyptis data")
plot(proc31,xlab = "Dimension 1",ylab = "Dimension 2", main = "Procrustes Errors for Classical MDS vs Sammon MDS on Hyptis data")
#2d
library(mclust)
res1<-Mclust(hyptisdata[,1:7],G=1:6)
res1
summ<-summary(res1)
summ
res1$BIC
res1<-Mclust(x,G=1:7)
res1$BIC
res1<-Mclust(x,G=1:8)
res1$BIC
res1<-Mclust(x,G=1:5)
res1$BIC
res1<-Mclust(x,G=1:8)
res1$BIC
res1<-Mclust(hyptisdata[,1:7],G=1:8)
summ<-summary(res1)
summ
res1$BIC
res1$BIC
res1
res1$BIC
plot(res1,what = "BIC",legendArgs=list(x="topleft",cex=0.5,horiz=T))
plot(res1,what = "BIC",legendArgs=list(x="topleft",cex=0.5,horiz=T),ylim = c(-1500,-1300))
plot(res1,what = "BIC",legendArgs=list(x="topleft",cex=0.5,horiz=T),ylim = c(-1500,-1100))
plot(res1,what = "BIC",legendArgs=list(x="topleft",cex=0.5,horiz=T),ylim = c(-1600,-1100))
res1<-Mclust(hyptisdata[,1:7],G=1:6)
summ<-summary(res1)
res1$BIC
plot(res1,what = "BIC",legendArgs=list(x="topleft",cex=0.5,horiz=T),ylim = c(-1600,-1100))
#Cross Tabulation
table(hyptisdata[,8],summ$classification)
#Calculating the adjusted Rand Index
adjustedRandIndex(hyptisdata[,8],summ$classification)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,60),ylim = c(-30,40), xlab = "",ylab = "",main="Multi Dimentional Scaling of Hyptis")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue3","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="royalblue1")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold1")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue3","red","royalblue1","gold1"), pch=19, cex=0.8)
# Applying Sammon and Kruskal function to the data with q=2
Sammon2<-sammon(D,k=2)
Kruskal2<-isoMDS(D,k=2)
# The calculated values are then plotted on the plot of classical scaling configuration
plot(mds2$points[,1],mds2$points[,2],type = "n",xlim = c(-40,60),ylim = c(-30,50), xlab = "Point 1",ylab = "Point 2",main="Multi Dimentional Scaling of Hyptis")
text(mds2$points[,1],mds2$points[,2],hyptisdata[,8],cex=1,col = c("black","skyblue3","red","palegreen2")[hyptisdata[,8]])
par(new=TRUE,col.axis = "transparent")
plot(Sammon2$points[,1],Sammon2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Sammon2$points[,1],Sammon2$points[,2],row.names(hyptisdata),cex=1,col ="royalblue1")
par(new=TRUE,col.axis = "transparent")
plot(Kruskal2$points[,1],Kruskal2$points[,2],type = "n",xlab = "",ylab = "",axes=FALSE)
text(Kruskal2$points[,1],Kruskal2$points[,2],row.names(hyptisdata),cex=1,col ="gold1")
legend("topright", legend=c(as.character(unique(hyptisdata[,8])),"Sammon","Kruskal"),
col=c("palegreen2","black","skyblue3","red","royalblue1","gold1"), pch=19, cex=0.8)

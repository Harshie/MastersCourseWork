X.Sepal.Length
Sepal.Length
class(X)
X
X.Length
plot(X$Sepal.Length,X$Sepal.Width)
X$Sepal.Length
help(pairs)
help("pch")
help("adjustcolor")
pairs(X,gap = 0,pch=19,col=adjustcolor(1,0.4))
pairs(X,gap = 0,pch=21,col=adjustcolor(1,0.4))
pairs(X,gap = 0,pch=24,col=adjustcolor(1,0.4))
pairs(X,gap = 0,pch=19,col=adjustcolor(1,0.4))
pairs(X,gap = 0,pch=19,col=adjustcolor(1,1))
pairs(X,gap = 0,pch=19,col=adjustcolor(1,0.5))
pairs(X,gap = 0,pch=19,col=adjustcolor(1,0.4))
pairs(X,gap = 0,pch=19,col=adjustcolor(1,0.2))
pairs(X,gap = 0,pch=19,col=adjustcolor(1,0.4))
fitkm2<-kmeans(X,centers = 2)
fitkm2
fitkm2
fitkm3<-kmeans(X,centers = 3)
fitkm3
par(mfrow=c(1,2))
fitkm3$centers
table(fitkm3$cluster)
38+50+62
help("kmeans")
symb<-c(15,16,17)
help("col")
col<-c("darkorange2","deepskyblue3","magenta3")
help("adjustcolor")
pairs(X,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
par(mfrow=c(1,2))
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
par(mfrow=c(1,2))
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
par(mfrow=c(1,1))
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
par(mfrow=c(1,2))
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
par(mfrow=c(1,2))
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
par(mfrow=c(1,2))
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
par(mfrow= c(1,2) )
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4))
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4))
par(mfrow= c(1,2) )
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4),main="Cluster 3")
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4),main="Cluster 2")
par(mfrow= c(2,1) )
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4),main="Cluster 3")
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4),main="Cluster 2")
par(mfrow=c(1,1))
plot(X)
par(mfrow= c(2,1) )
plot(X)
plot(X$Sepal.Length,X$Sepal.Width)
par(mfrow= c(2,1) )
pairs(X,gap=0,pch=symb[fitkm3$cluster],col=adjustcolor(col[fitkm3$cluster],0.4),main="Cluster 3")
pairs(X,gap=0,pch=symb[fitkm2$cluster],col=adjustcolor(col[fitkm2$cluster],0.4),main="Cluster 2")
library(cluster)
fitpam<- pam(X,k=3,metric = "manhattan")
fitpam
table(fitpam$clustering)
50+61+39
fitpam$silinfo
pairs(X,gap=0,pch=symb[fitpam$clustering],col=adjustcolor(col[fitpam$clustering],0.4),main="Cluster 3")
par(mfrow=c(1,1))
pairs(X,gap=0,pch=symb[fitpam$clustering],col=adjustcolor(col[fitpam$clustering],0.4),main="Cluster 3")
pairs(X,gap=1,pch=symb[fitpam$clustering],col=adjustcolor(col[fitpam$clustering],0.4),main="Cluster 3")
table(fitkm3$cluster,fitpam$clustering)
table(fitkm3$cluster)
table(fitpam$clustering)
table(fitkm2$cluster,fitkm3$cluster)
K=3
fitkm21<-kmeans(X,centers = K,nstart = 25)
fitkm21
wss<-bss<rep(NA,K)
for (i in 1:K) {
fitfor3<- kmeans(X,centers = i,nstart = 25)
wss[i]<-fitfor3$tot.withinss
bss[i]<-fitfor3$betweenss
}
wss<-bss<rep(NA,K)
wss<-bss<-rep(NA,K)
for (i in 1:K) {
fitfor3<- kmeans(X,centers = i,nstart = 25)
wss[i]<-fitfor3$tot.withinss
bss[i]<-fitfor3$betweenss
}
View(fitfor3)
View(fitfor3)
fitfor3[["withinss"]]
fitfor3
# compute calinski-harabasz index
N <-nrow(X)
ch <-( bss/(1:K-1) )/( wss/(N-1:K) )
ch[1] <-0
plot(1:K, ch,type ="b",ylab ="CH",xlab ="K")
plot(1:K,ch,type = "b",ylab = "CH",xlab="K")
bss
#Silhouette
d<-dist(X,method = "euclidean")^2
d
d
d
sil<-silhouette(fitkm2$cluster,d)
sil3<-silhouette(fitkm3$cluster,d)
sil
plot(sil,col = adjustcolor(col[1:2],0.3),main = "K=2")
plot(sil3,col = adjustcolor(col[1:2],0.3),main = "K=2")
plot(sil3,col = adjustcolor(col,0.3),main = "K=2")
plot(sil,col = adjustcolor(col[1:2],0.3),main = "K=2")
par(mfrow=c(1,1))
par(mfrow= c(1,2) )
plot(sil,col = adjustcolor(col[1:2],0.3),main = "K=2")
plot(sil3,col = adjustcolor(col,0.3),main = "K=2")
par(mfrow=c(1,1))
plot(sil,col = adjustcolor(col[1:2],0.3),main = "K=2")
library(e1071)
install.packages("e1071")
library(e1071)
tab<-table(fitkm3$cluster)
tab
classAgreement(tab)
tab<-table(fitkm3$cluster,fitkm2$cluster)
classAgreement(tab)
glassData<-read.csv("Glass.csv",header = T)
set.seed(19200349)
#glassData<-glassData[-floor(runif(nrow(glassData)))]
num=floor(runif(1,min=1,max =nrow(glassData)))
#glassData <-glassData[-floor(runif(1,min=1,max =nrow(glassData)))]
glassData<-glassData[-num,]
data1 <- glassData[,-1]
cor(data1)
View(data1)
View(data1)
data1 <- glassData[,-1]
S <-c()
D<-c()
for (i in 1:nrow(data1)) {
colmeans1<-mean(data1[,i])
for (j in 1:nrow(data1[,j])) {
colmeans2<-mean(data1[,j])
sum1 <- 0
for (a in 1:nrow(data1)) {
sum1<- sum1 + ((data1[a,i]-colmeans1)*(data1[a,j]-colmeans2))
}
S<-c(s,sum1/(nrow(data1)-1))
if(i==j){
D<-c(D,1/sqrt(sum1/(nrow(data1)-1)))
}
else{
D<-c(d,0)
}
}
}
for (i in 1:nrow(data1)) {
colmeans1<-mean(data1[,i])
for (j in 1:nrow(data1)) {
colmeans2<-mean(data1[,j])
sum1 <- 0
for (a in 1:nrow(data1)) {
sum1<- sum1 + ((data1[a,i]-colmeans1)*(data1[a,j]-colmeans2))
}
S<-c(s,sum1/(nrow(data1)-1))
if(i==j){
D<-c(D,1/sqrt(sum1/(nrow(data1)-1)))
}
else{
D<-c(d,0)
}
}
}
for (i in 1:nrow(data1)) {
colmeans1<-mean(data1[,i])
for (j in 1:nrow(data1)) {
colmeans2<-mean(data1[,j])
sum1 <- 0
for (a in 1:nrow(data1)) {
sum1<- sum1 + ((data1[a,i]-colmeans1)*(data1[a,j]-colmeans2))
}
S<-c(S,sum1/(nrow(data1)-1))
if(i==j){
D<-c(D,1/sqrt(sum1/(nrow(data1)-1)))
}
else{
D<-c(d,0)
}
}
}
for (i in 1:nrow(data1)) {
colmeans1<-mean(data1[,i])
for (j in 1:nrow(data1)) {
colmeans2<-mean(data1[,j])
sum1 <- 0
for (a in 1:nrow(data1)) {
sum1<- sum1 + ((data1[a,i]-colmeans1)*(data1[a,j]-colmeans2))
}
S<-c(S,sum1/(nrow(data1)-1))
if(i==j){
D<-c(D,1/sqrt(sum1/(nrow(data1)-1)))
}
else{
D<-c(D,0)
}
}
}
glassData<-read.csv("Glass.csv",header = T)
set.seed(19200349)
#glassData<-glassData[-floor(runif(nrow(glassData)))]
num=floor(runif(1,min=1,max =nrow(glassData)))
#glassData <-glassData[-floor(runif(1,min=1,max =nrow(glassData)))]
glassData<-glassData[-num,]
data1 <- glassData[,-1]
S <-c()
D<-c()
for (i in 1:nrow(data1)) {
colmeans1<-mean(data1[,i])
for (j in 1:nrow(data1)) {
colmeans2<-mean(data1[,j])
sum1 <- 0
for (a in 1:nrow(data1)) {
sum1<- sum1 + ((data1[a,i]-colmeans1)*(data1[a,j]-colmeans2))
}
S<-c(S,sum1/(nrow(data1)-1))
if(i==j){
D<-c(D,1/sqrt(sum1/(nrow(data1)-1)))
}
else{
D<-c(D,0)
}
}
}
for (i in 1:ncol(data1)) {
colmeans1<-mean(data1[,i])
for (j in 1:ncol(data1)) {
colmeans2<-mean(data1[,j])
sum1 <- 0
for (a in 1:nrow(data1)) {
sum1<- sum1 + ((data1[a,i]-colmeans1)*(data1[a,j]-colmeans2))
}
S<-c(S,sum1/(nrow(data1)-1))
if(i==j){
D<-c(D,1/sqrt(sum1/(nrow(data1)-1)))
}
else{
D<-c(D,0)
}
}
}
Covariance <- matrix(S,nrow = 13,ncol = 13,byrow = T)
Diagonal <- matrix(D,nrow = 13,ncol = 13,byrow = T)
Correlation<-Diagonal%*%Covariance%*%Diagonal
RCorrelation<-cor(data1)
Correlation
RCorrelation
glassData<-read.csv("Glass.csv",header = T)
set.seed(19200349)
#glassData<-glassData[-floor(runif(nrow(glassData)))]
num=floor(runif(1,min=1,max =nrow(glassData)))
glassData<-read.csv("Glass.csv",header = T)
set.seed(19200349)
#glassData<-glassData[-floor(runif(nrow(glassData)))]
num=floor(runif(1,min=1,max =nrow(glassData)))
set.seed(1920034)
#glassData<-glassData[-floor(runif(nrow(glassData)))]
num=floor(runif(1,min=1,max =nrow(glassData)))
#glassData<-glassData[-floor(runif(nrow(glassData)))]
num=floor(runif(1,min=1,max =nrow(glassData)))
set.seed(19200349)
#glassData<-glassData[-floor(runif(nrow(glassData)))]
num=floor(runif(1,min=1,max =nrow(glassData)))
#glassData<-glassData[-floor(runif(nrow(glassData)))]
num=floor(runif(1,min=1,max =nrow(glassData)))
#glassData <-glassData[-floor(runif(1,min=1,max =nrow(glassData)))]
glassData<-glassData[-num,]
data1 <- glassData[,-1]
S <-c()
D<-c()
for (i in 1:ncol(data1)) {
colmeans1<-mean(data1[,i])
for (j in 1:ncol(data1)) {
colmeans2<-mean(data1[,j])
sum1 <- 0
for (a in 1:nrow(data1)) {
sum1<- sum1 + ((data1[a,i]-colmeans1)*(data1[a,j]-colmeans2))
}
S<-c(S,sum1/(nrow(data1)-1))
if(i==j){
D<-c(D,1/sqrt(sum1/(nrow(data1)-1)))
}
else{
D<-c(D,0)
}
}
}
Covariance <- matrix(S,nrow = 13,ncol = 13,byrow = T)
Diagonal <- matrix(D,nrow = 13,ncol = 13,byrow = T)
Correlation<-Diagonal%*%Covariance%*%Diagonal
RCorrelation<-cor(data1)
if(Correlation==RCorrelation){
print("TRUE")
}
if(Correlation==RCorrelation){
print("TRUE")
}
Correlation<-Diagonal%*%Covariance%*%Diagonal
RCorrelation<-cor(data1)
Correlation
RCorrelation
eigendata <- eigen(Covariance)
eigendata
eignedata[,c(1:2)]
eigendata[,c(1:2)]
eigendata[,c(1,2)]
eigendata[,1:2]
eigendata[,1]
eigendata$values[,c(1,2)]
eigendata$values[1:2]
eigendata$vectors[,c(1,2)]
Covariance%*%eigendata$vectors[,1]
matrix(eigendata$values[1]%*%eigendata$vectors[,1])
Covariance%*%eigendata$vectors[,1],matrix(eigendata$values[1]%*%eigendata$vectors[,1])
Covariance%*%eigendata$vectors[,1]
matrix(eigendata$values[1]%*%eigendata$vectors[,1])
matrix(eigendata$values[2]%*%eigendata$vectors[,2])
Covariance%*%eigendata$vectors[,2]
t(eigendata$vectors[,1])
eigendata$vectors[,1]
t(eigendata$vectors[,1])%*%eigendata$vectors[,1]
t(eigendata$vectors[,2])%*%eigendata$vectors[,2]
(eigendata$vectors[,1])%*%t(eigendata$vectors[,2])
t(eigendata$vectors[,1])%*%(eigendata$vectors[,2])
t(eigendata$vectors[,2])%*%eigendata$vectors[,1]
#The diagonal elements of S are the variance and that can be extracted to a variable for plotting.
variance<-diag(Covariance)
plot(variance)
hist(variance)
plot(variance)
plot(variance)
hist(variance)
plot(variance,xlab = "Chemical Variance",ylab = "Variance",main = "Variance Plot")
EX1<-5
EX2<-8
VarX1<-6
VarX2<-7
CovX1X2<-2.5
#Expected value of X2-X1 is EX2-EX1
EX2X1<-EX2-EX1
#Variance of X2-X1 is VX2+VX1-CovX1X2
VarX2X1<- VarX1 + VarX2 -CovX1X2
print("Expected Value of X2-X1 is ",EX2X1)
cat("Expected Value of X2-X1 is ",EX2X1)
cat("Variance of X2-X1 is ",VarX2X1)
#Variance of X2-X1 is VX2+VX1-2CovX1X2
VarX2X1<- VarX1 + VarX2 -2CovX1X2
#Variance of X2-X1 is VX2+VX1-2CovX1X2
VarX2X1<- VarX1 + VarX2 -(2*CovX1X2)
cat("Variance of X2-X1 is ",VarX2X1)
#Expected value and Variance of V=X2-2X1
EX2_2X1 <-EX2-(2*EX1)
VarX2_2X1<- VarX2 + (4*VarX1) - (4*CovX1X2)
cat("Expected Value and Variance of X2-2X1 is ",EX2_2X1,"and",VarX2_2X1)
#The Expected value and variance of U=X2-X1 is
cat("Expected Value and Variance of X2-X1 is ",EX2X1,"and",VarX2X1)
totalcov<-matrix(c(1,-1),nrow=1,ncol = 2,byrow = T)%*%matrix(c(7,2.5,2.5,6),nrow = 2,ncol = 2,byrow = T)%*%matrix(c(1,-2),nrow = 2,ncol = 1,byrow = T)
CorrectionUV<-totalcov/sqrt(VarX2_2X1*VarX2X1)
cat("The correlation of U & V is ",CorrectionUV)
## Question 2
View(Correlation)
sdval<-apply(data1,2,sd)
meanval<-apply(data1,2,mean)
data2<-scale(data1,meanval,sdval)
View(data2)
View(data2)
k<-15
wss<-bss<-rep(NA,k)
for (i in 1:k) {   fitmodel<- kmeans(data2,centers = i,nstart = 50)   wss[i]<-fitmodel$tot.withinss
for (i in 1:k) {
fitmodel<- kmeans(data2,centers = i,nstart = 50)   wss[i]<-fitmodel$tot.withinss
for (i in 1:k) {
fit1 <- kmeans(data2,centers = i,nstart = 50)
}
fit1
for (i in 1:k) {
fit1 <- kmeans(data2,centers = i,nstart = 50)
wss[i]<-fit1$tot.withinss
bss[i]<-fit1$betweenss
}
#computing CH Index
N<-nrow(data1)
ch<-(bss/(1:k-1))/(wss/(N-1:k))
ch[1]<-0
plot(1:k,ch,type = "b",ylab = "CH Values",xlab = "K Clusters", main="Calinski-Haraba sz index")
plot(1:k,ch,type = "b",ylab = "CH Values",xlab = "K Clusters", main="Calinski-Haraba sz index")
plot(1:k,ch,type = "b",ylab = "CH Values",xlab = "K Clusters", main="Calinski-Harabasz index")
fit2<- kmeans(data2,centers = 2,nstart = 50)
fit3<- kmeans(data2,centers = 3,nstart = 50)
fit4<- kmeans(data2,centers = 4,nstart = 50)
fit4
table(fit2$cluster,glassData$Group)
table(fit3$cluster,glassData$Group)
table(fit4$cluster,glassData$Group)
distance<-dist(glassData,method = "Euclidean")
distance<-dist(glassData,method = "euclidean")
distance
c1.glassData<-hclust(distance,method = "average")
plot(c1.glassData)
c1.single<-hclust(distance,method = "single")
c1.single<-hclust(distance,method = "single")
c1.complete<-hclust(distance,method = "complete")
plot(c1.glassData)
plot(c1.single)
plot(c1.complete)
hierarchical2<-cutree(c1.glassData,k=2)
hierarchical2
plot(hierarchical2)
hierarchical4<-cutree(c1.glassData,k=4)
plot(hierarchical4)
table(hierarchical2,glassData$Group)
table(hierarchical4,glassData$Group)
hierarchical2<-cutree(c1.glassData,k=2)
table(hierarchical2,glassData$Group)
table2<-table(hierarchical2,fit2$cluster)
table2<-table(hierarchical2,fit2$cluster)
#cross tabulation with 2 and four cluster
table2<-table(hierarchical2,fit2$cluster)
table4<-table(hierarchical4,fit4$cluster)
table2
table4
classAgreement(table2)
library(e1071)
install.packages(e1071)
install.packages("e1071")
library("e1071")
classAgreement(table2)
classAgreement(table4)
classAgreement(table2)
#cross tabulation with 2 and four cluster
table2<-table(hierarchical2,fit2$cluster)
table4<-table(hierarchical4,fit4$cluster)
classAgreement(table2)
classAgreement(table4)
symb<-c(15,16,17,18)
col<-c("darkorange2","deepskyblue3","magenta3","burlywood1")
plot(data1,gap=0,pch=symb[glassData$Group],col=adjustcolor(col[glassData$Group],0.4),main="Group of Glasses")
nrow(glassData[glassData$Group==1,])
hist(glassData$PbO,xlab = "Pb0",ylab = "Frequency",col="chocolate2",main = "Distribution of Pb0")
glassdata2<-data1[glassData$Group!="1",-13]
fitnew2<-kmeans(glassdata2,centers = 2,nstart = 50)
fitnew3<-kmeans(glassdata2,centers = 3,nstart = 50)
table(fitnew2$cluster,glassData[glassData$Group!="1","Group"])
table(fitnew3$cluster,glassData[glassData$Group!="1","Group"])
plot(glassdata2,gap=0,pch=symb[glassData2$Group],col=adjustcolor(col[glassData2$Group],0.4),main="Group of Glasses")
plot(glassdata2,gap=0,pch=symb[glassdata2$Group],col=adjustcolor(col[glassdata2$Group],0.4),main="Group of Glasses")
View(glassdata2)
View(glassdata2)
plot(glassdata2,gap=0,pch=symb[1:3],col=adjustcolor(col[1:3],0.4),main="Group of Glasses")
cat("The computed correlation is ",Correlation)
cat("The computed correlation is ")
print(Correlation)
cat("Correlation computed using R code is ")
RCorrelation<-cor(data1)
print(RCorrelation)
library(MASS)
data("fgl")
set.seed(19200349)
num1=floor(runif(1,min=1,max =nrow(fgl)))
fgldata<-fgl[-num1,]
nrow(fgldata)
nrow(fgl),nrow(fgldata)
nrow(fgl)
nrow(fgldata)
View(fgldata)
View(fgldata)
help("fgl")
View(fgldata)
View(fgldata)
View(c1.single)
sdval1<-apply(fgldata[,-10],2,sd)
fgldata<-sweep(fgldata[-10],2,sdval,"/")
fgldata<-sweep(fgldata[-10],2,sdval1,"/")
View(fgldata)
View(fgldata)
fgldata<-fgl[-num1,]
sdval1<-apply(fgldata[,-10],2,sd)
fgldata1<-sweep(fgldata[-10],2,sdval1,"/")
View(fgldata1)
View(fgldata1)
lda.result<- lda(fgldata$type~fgldata1$RI + fgldata1$Na + fgldata1$Mg + fgldata1$Al + fgldata1$Si + fgldata1$K +fgldata1$Ca +fgldata1$Ba + fgldata1$Fe)
lda.result$prior
lda.result$means
setwd("~/UCD/Multivariate/Assignment1")
View(glassData)
fgldata1<-data.frame(cbind(fgldata1,fgldata[,10]))
View(fgldata1)
colnames(fgldata1)<-colnames(fgldata)
colnames(fgldata)
